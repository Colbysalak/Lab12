Name: Colby Salak

Number of elements: 10000

Bubble Sort
Sorted:15.6 seconds
Reversed:36.5 seconds
Random:28.9 seconds

Bubble Sort Early Exit
Sorted:0.013 seconds
Reversed:42.2 seconds
Random:29.9 seconds

Selection Sort
Sorted:12.4 seconds
Reversed:12.7 seconds
Random:12.4 seconds

Insertion Sort
Sorted:0.0031 seconds
Reversed:27.1 seconds
Random:14.9 seconds

Merge Sort
Sorted:0.12 seconds
Reversed:0.010 seconds
Random:0.18 seconds



Questions to answer:
1) What was the worst case scenario for any sorting technique?
   
Bubble Sort with Early Exit had the worst case for reversed data. This sorting technique used the most time by far. 

2) The first 3 sorts have the same runtime of O(n^2). Why were the times different? Why would one be more efficient than the others?

Each type of sorting technique offers its advantages and disadvantages. Bubble sorts by comparing two numbers. This leads to a lot of unnecesary comparions. Bubble sort with early exit is an improved version of bubble sort by further ooptimizing the technique. This technique is great at sorting nearly completed data sets. Selection sort is sort of like the turtle and the hare tall tale. It is very consistent, but has no early exit chance like some of the others do.  

3) Why was merge sort so much more efficient?
  
Merge sort divides the array into halves, sorts each half, and then merges them back together. This divide-and-conquer approach means that it perfoms fewer   comparisons overall which improves efficiency. 
 
4) The built-in sorting technique for most programming languages is known as TimSort.
This is a merge sort until the arrays have fewer than 10 elements, then it does an insertion sort. Why would this be useful?
  
TimSort's hybrid approach of Merge Sort and Insertion Sort is designed to take advantage of the strengths of both algorithms. It uses the efficieny of Merge Sort early on with large data sets. When the set gets sorted until 10 are left unsorted, it swithces to Insertion Sort. This switch is effective because Insertion Sort is very efficient with limited sets. 

5) What issues can you see with a recursive sorting technique like merge sort?

While merge sort is efficient, especially for larger datasets, it has some drawbacks, particularly because it's a recursive algorithm. It requries additional memory when sorting rather large data sets. This could be a disadvantage for systems with constrained memory.
